//JS Advanced Discussion Group

 // Hello Everyone!!! 

// Building a micro, vanilla JS library
// Groups: 2-3 ppl

// We are going to build a string manipulation micro library. 


// 1. You will need to set up a node project on one of the students machine:
// - remember about the correct file structure for your files
// - what files and folders should node project include? // lib test

// 2. You will need to create three files:
// - library module: stringis.js
// - file main.js that will use the functions from the module. `main.js` should simply call the functions and console log the result. If any of the functions throws an error main.js should handle that error and log to console ‘invalid input’. 
// - stringis.test.js that checks if all your functions returns what they should

// 3. stringis.js needs to include following functions and each function has to throw an error if the input is NOT a string:


// caseSwitchis
// change all the upper case characters to lower case characters and lowercase characters to uppercase characters. Leave all the other characters unchanged. 
// ex. Abcd_xkLL? => aBCD_Xkll?

// problem: transform only alpha chars to opposite case, leave non a-z chars alone, and return new string
// creating and returning a new string

// Examples

function caseSwitchis(string) {
  return string.split('').map(char => {
    if (char.match(/[a-z]/)) {
      return char.toUpperCase();
    } else if (char.match(/[A-Z]/)) {
      return char.toLowerCase();
    } else {
      return char;
    }
  }).join('')
  
}

console.log(caseSwitchis('Abcd_xkLL?')); // aBCD_Xkll?
// [a-zA-Z]
// iterate over string char by char

// given a string with alpha and non alpha characters, mapping each char sorted, uppercase comes before lowercase

// problem
// 
// steps 
// iterate over string, pull alpha characters 'Hellohaveaniceday'
// sort this new string (cb to sort case insensitively) 'aaacdillnovy'
// iterate over the given string from the left to right, if a character is not alphabetical, add it to the corresponding index in the new sorted string 'aaacd, eeeHhillnovy' Hello, have a nice day!
function alphaOrderis(givenString) {
  let cleaned = givenString.replace(/[^a-z]/gi, '')
  // return cleaned;
  
  let sorted = cleaned.split('').sort((a,b)=>{
    a = a.toLowerCase();
    b = b.toLowerCase();
    if(a < b){
      return -1;
    } else if(a > b){
      return 1;
    } else{
      return 0;
    }
  })
  

givenString.split('').forEach((ogChar, idx) => {
  if (ogChar.match(/[^a-z]/gi)) {
    sorted.splice(idx, 0, ogChar)
  }
})
  return sorted.join('');
}
                      
console.log(alphaOrderis('Hello, have a nice day!')) // aaacd, eeeH h illn ovy!                   
// alphaOrderis

// sort all the characters in a string to be in an alphabetical order. Leaves all non alphabetical characters in the same place. Case insensitive. 

// // ex. Hello, have a nice day!  => aaacd, eeeH h illn ovy!

// gRamsayTranslateis
// takes a string and translating it to Gordon Ramsay talk: change all characters to uppercase. End all the sentence with ‘!!!’. Add ‘YOU IDIOT SANDWICH’  after each ‘,’
// ex. “This pizza is so disgusting, if you take it to Italy you’ll get arrested.”
// => “THIS PIZZA IS SO DISGUSTING, YOU IDIOT SANDWICH,  IF YOU TAKE IT TO ITALY YOU’LL GET ARRESTED!!!”

// compresingis
// takes a string and compress it. It changes all consecutive same characters into one and their cout
// ex.  ‘Hello Woooorld’ => ‘Hel(2)o Wo(4)rld’





// Bonus Features:
// A bonus if you use regex at least once!

// Bonus function:

// firstLetterSwichis 
// takes two strings and returns and array with two strings with switched first letters of each word.
// Ex: firstLetterSwichis(‘I like eating icecream’, ‘What a nice day!’)
// => [‘W aike neating dcecream’, ‘Ihat l eice iay’];

// vowelSwitchis
// that takes in a string and replaces all the vowels [a,e,i,o,u] with their respective positions within that string.
// ex. 'this is my string' => 'th3s 6s my str15ng'

// removisDuplicatis
// Removing all consecutive duplicate words from a string, leaving only first words entries.
// Ex:  ‘"alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta" => ‘"alpha beta gamma delta alpha beta gamma delta"




